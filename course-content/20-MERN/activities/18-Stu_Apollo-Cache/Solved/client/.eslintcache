[{"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/index.js":"1","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/App.js":"2","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/reportWebVitals.js":"3","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/pages/Home.js":"4","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/Header/index.js":"5","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/Footer/index.js":"6","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/utils/queries.js":"7","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/ThoughtList/index.js":"8","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/ThoughtForm/index.js":"9","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/utils/mutations.js":"10"},{"size":500,"mtime":1638807804248,"results":"11","hashOfConfig":"12"},{"size":614,"mtime":1638807804247,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1638807804249,"results":"14","hashOfConfig":"12"},{"size":1312,"mtime":1661451859112,"results":"15","hashOfConfig":"12"},{"size":409,"mtime":1638807804247,"results":"16","hashOfConfig":"12"},{"size":503,"mtime":1638807804247,"results":"17","hashOfConfig":"12"},{"size":188,"mtime":1638807804250,"results":"18","hashOfConfig":"12"},{"size":752,"mtime":1638807804248,"results":"19","hashOfConfig":"12"},{"size":3948,"mtime":1661404071241,"results":"20","hashOfConfig":"12"},{"size":352,"mtime":1638807804249,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f5ydr5",{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/index.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/App.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/reportWebVitals.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/pages/Home.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/Header/index.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/Footer/index.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/utils/queries.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/ThoughtList/index.js",[],"/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/components/ThoughtForm/index.js",["43"],"// ðŸ”‘ The update function modifies the data in the cache to match the changes made in the database when a mutation executes. \n// However, it looks like we have a TypeError and the function is not working properly.\n\n// For the update() function to operate properly, we must pass in two arguments: \n// a cache object and a data property that holds the value of data returned from our mutation function. \n// Because our broken code is returning a TypeError, it is likely that one of these is not the right type.\n\n// ðŸ”‘ The data is not separate from the addThought() mutation data. \n// Instead, the data we want to store IS the mutation data, identified as addThought(). \n// This could be causing the bug!  update(cache, data, addThought) => update(cache, { data: { addThought } }) {\n\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_THOUGHT } from '../../utils/mutations';\nimport { QUERY_THOUGHTS } from '../../utils/queries';\n\nconst ThoughtForm = () => {\n  const [formState, setFormState] = useState({\n    thoughtText: '',\n    thoughtAuthor: '',\n  });\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addThought, { error }] = useMutation(ADD_THOUGHT, {\n    // All returning data from Apollo Client queries/mutations return in a `data` field, followed by the the data returned by the request\n    // This could be causing the bug!  update(cache, data, addThought) => update(cache, { data: { addThought } }) {\n    update(cache, { data: { addThought } }) {\n      try {\n        const { thoughts } = cache.readQuery({ query: QUERY_THOUGHTS });\n\n        cache.writeQuery({\n          query: QUERY_THOUGHTS,\n          data: { thoughts: [addThought, ...thoughts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const { data } = await addThought({\n        variables: { ...formState },\n      });\n\n      setFormState({\n        thoughtText: '',\n        thoughtAuthor: '',\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'thoughtText' && value.length <= 280) {\n      setFormState({ ...formState, [name]: value });\n      setCharacterCount(value.length);\n    } else if (name !== 'thoughtText') {\n      setFormState({ ...formState, [name]: value });\n    }\n  };\n\n  return (\n    <div>\n      <h3>What's on your techy mind?</h3>\n\n      <p\n        className={`m-0 ${\n          characterCount === 280 || error ? 'text-danger' : ''\n        }`}\n      >\n        Character Count: {characterCount}/280\n        {error && <span className=\"ml-2\">Something went wrong...</span>}\n      </p>\n      <form\n        className=\"flex-row justify-center justify-space-between-md align-center\"\n        onSubmit={handleFormSubmit}\n      >\n        <div className=\"col-12\">\n          <textarea\n            name=\"thoughtText\"\n            placeholder=\"Here's a new thought...\"\n            value={formState.thoughtText}\n            className=\"form-input w-100\"\n            style={{ lineHeight: '1.5' }}\n            onChange={handleChange}\n          ></textarea>\n        </div>\n        <div className=\"col-12 col-lg-9\">\n          <input\n            name=\"thoughtAuthor\"\n            placeholder=\"Add your name to get credit for the thought...\"\n            value={formState.thoughtAuthor}\n            className=\"form-input w-100\"\n            onChange={handleChange}\n          />\n        </div>\n\n        <div className=\"col-12 col-lg-3\">\n          <button className=\"btn btn-primary btn-block py-3\" type=\"submit\">\n            Add Thought\n          </button>\n        </div>\n        {error && (\n          <div className=\"col-12 my-3 bg-danger text-white p-3\">\n            Something went wrong...\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default ThoughtForm;\n","/Users/jeromechenette/Desktop/today/04/18-Stu_Apollo-Cache/Solved/client/src/utils/mutations.js",[],{"ruleId":"44","severity":1,"message":"45","line":47,"column":15,"nodeType":"46","messageId":"47","endLine":47,"endColumn":19},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar"]